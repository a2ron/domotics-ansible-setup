---
############################################################

- hosts: all
  gather_facts: false
  pre_tasks:
    - name: Install python2 for Ansible
      become: yes
      raw: bash -c "test -e /usr/bin/python || (apt -qqy update && apt install -qqy python-minimal)"
      register: output
      changed_when: output.stdout != ""

- hosts: all
  vars:
    - install_path: "{{ ansible_env.HOME }}/alexa"
    - log_path: "/var/log/startsample"

  tasks:

    - name: "Clean {{ install_path }}"
      tags: install
      become: yes
      file:
        path: "{{ install_path }}"
        state: absent

    - name: "Ensure {{ install_path }} exists"
      tags: install
      file:
        path: "{{ install_path }}"
        state: directory

    - name: Provision files
      tags: run, install, scripts, cron
      template:
        src: files/alexa/{{ item }}
        dest: "{{ install_path }}/{{ item }}"
        mode: u+x
      with_items:
        - config.txt
        - ensure-startsample-alive.sh
        - set-max-volumen.sh
        - log-cleaner.sh
        - alexa-heartbeat.sh

    - name: "Download installation scripts"
      tags: install
      get_url:
        url: "https://raw.githubusercontent.com/a2ron/avs-device-sdk/master/tools/Install/{{ item }}"
        dest: "{{ install_path }}/{{ item }}"
      with_items:
        - setup.sh
        - pi.sh


########################################################################################################################

    - name: Install OS packages
      become: yes
      package:
        name: "{{ item }}"
        state: present
      with_items:
        - screen
        - python-pip
        - wiringpi

    - name: Install PIP packages
      pip:
        name: "{{ item }}"
      with_items:
        - requests

    - name: "Ensure /var/log/startsample/ exists"
      become: yes
      file:
        path: "/var/log/startsample/"
        state: directory

    - name: "Install ensure-startsample-alive crontab job for every minute"
      tags: cron
      cron:
        name: "ensure-startsample-alive crontab job for every minute"
        job: "{{ install_path }}/ensure-startsample-alive.sh -r"
        user: "{{ ansible_ssh_user }}"
  
    - name: "Install alexa-heartbeat crontab"
      tags: cron
      cron:
        name: "alexa-heartbeat"
        job: "{{ install_path }}/alexa-heartbeat.sh"
        user: "{{ ansible_ssh_user }}"
        special_time: reboot

    - name: "Install log-cleaner crontab job for every minute"
      tags: cron
      cron:
        name: "log-cleaner crontab job for every minute"
        job: "{{ install_path }}/log-cleaner.sh"
        user: "{{ ansible_ssh_user }}"

    - name: "Install ensure-startsample-alive crontab job for reboot"
      tags: cron
      cron:
        name: "ensure-startsample-alive crontab job for reboot"
        job: "{{ install_path }}/ensure-startsample-alive.sh -r"
        user: "{{ ansible_ssh_user }}"
        special_time: reboot

    - name: "Install crontab job to set max volumen on reboot"
      tags: cron
      cron:
        name: "set max volumen on reboot"
        job: "{{ install_path }}/set-max-volumen.sh"
        user: "{{ ansible_ssh_user }}"
        special_time: reboot

    - name: "Run"
      tags: run
      shell: "bash {{ install_path }}/ensure-startsample-alive.sh -r"
      async: 9999999


########################################################################################################################

    - name: "Manual step (1/2): Launch setup script."
      tags: install
      debug:
        msg: "Launch in the target: cd {{ install_path }}; sudo bash setup.sh config.txt 2>&1 | tee setup.out"

    - name: "Manual step (2/2): Generate an authorization token."
      tags: install
      debug:
        msg: "Launch in the target: cd {{ install_path }}; sudo bash startauth.sh"